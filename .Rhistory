knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
version
library(tidyverse)
library(lubridate)
library(gridExtra)
library(grid)
URL1 <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
URL2 <- "https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf"
URL3 <- "https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2FNCDC%20Storm%20Events-FAQ%20Page.pdf"
URL4 <- "http://www.census.gov/2010census/xls/fips_codes_website.xls"
if(!dir.exists("./data")) dir.create("./data")
if(!file.exists("./data/data.bz2")) download.file(URL1, "./data/data.bz2",
quiet = TRUE)
if(!file.exists("./data/dataDoc.pdf")) download.file(URL2, "./data/dataDoc.pdf",
mode = "wb", quiet = TRUE)
if(!file.exists("./data/FAQ.pdf")) download.file(URL3, "./data/FAQ.pdf",
mode = "wb", quiet = TRUE)
if(!file.exists("./data/FIPS.xls")) download.file(URL4, "./data/FIPS.xls",
quiet = TRUE)
rm(list = ls())
stormData <- read.csv("./data/data.bz2")
stormData <- stormData[, c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES",
"PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")]
correctEVTYPE <- c("Astronomical Low Tide", "Avalanche", "Blizzard", "Coastal Flood",
"Cold/Wind Chill", "Debris Flow", "Dense Fog", "Dense Smoke",
"Drought", "Dust Devil", "Dust Storm", "Excessive Heat",
"Extreme Cold/Wind Chill", "Flash Flood", "Flood", "Frost/Freeze",
"Funnel Cloud", "Freezing Fog", "Hail", "Heat", "Heavy Rain",
"Heavy Snow", "High Surf", "High Wind", "Hurricane (Typhoon)",
"Ice Storm", "Lake-Effect Snow", "Lakeshore Flood", "Lightning",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current", "Seiche", "Sleet",
"Storm Surge/Tide", "Strong Wind", "Thunderstorm Wind", "Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami", "Volcanic Ash",
"Waterspout", "Wildfire", "Winter Storm", "Winter Weather")
correctEVTYPE <- toupper(correctEVTYPE)
length(unique(stormData$EVTYPE))
stormData$BGN_DATE <- mdy_hms(stormData$BGN_DATE)
yearMin <- min(year(stormData$BGN_DATE))
yearMax <- max(year(stormData$BGN_DATE))
dataPercent <- paste(format(mean(year(stormData$BGN_DATE) > 2001) * 100,
digits = 2), "%", sep = "")
validData <- subset(stormData, year(BGN_DATE) >= 2001)
sumDMG <- rowSums(validData[, c("FATALITIES", "INJURIES", "PROPDMG", "CROPDMG")])
validData <- subset(validData, sumDMG > 0)
length(unique(validData$EVTYPE))
## Removing leading/trailling spaces
validData$EVTYPE <- trimws(validData$EVTYPE)
## Standardizing case
validData$EVTYPE <- toupper(validData$EVTYPE)
## Removing double spaces
validData$EVTYPE <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", validData$EVTYPE, perl=TRUE)
## Removing plural of the last words
validData$EVTYPE <- gsub("S$", "", validData$EVTYPE)
length(unique(validData$EVTYPE))
mean(!validData$EVTYPE %in% correctEVTYPE)
TOTALDMG <- function(DMG, EXP) {
if(EXP == "H" | EXP == "h") {EXP <- 10^2}
else if(EXP == "K" | EXP == "k") {EXP <- 10^3}
else if(EXP == "M" | EXP == "m") {EXP <- 10^6}
else if(EXP == "B" | EXP == "b") {EXP <- 10^9}
else if(EXP %in% 1:8) {EXP <- 10}
else if(EXP == "+") {EXP <- 1}
else {EXP <- 0}
DMG * EXP
}
validData$TOTALPROPDMG <- with(validData, mapply(TOTALDMG, PROPDMG, PROPDMGEXP))
validData$TOTALCROPDMG <- with(validData, mapply(TOTALDMG, CROPDMG, CROPDMGEXP))
validData <- validData %>%
select(-PROPDMG, -PROPDMGEXP, -CROPDMG, -CROPDMGEXP)
impact <- validData %>%
mutate(COMPLIANT = EVTYPE %in% correctEVTYPE) %>%
group_by(COMPLIANT) %>%
summarize(FATALITIES = sum(FATALITIES),
INJURIES = sum(INJURIES),
TOTALPROPDMG = sum(TOTALPROPDMG*1e-9),
TOTALCROPDMG = sum(TOTALCROPDMG*1e-9))
impact <- impact[1, 2:5]/(impact[1, 2:5]+impact[2, 2:5])*100
print(impact)
validData <- validData %>%
filter(EVTYPE %in% correctEVTYPE) %>%
group_by(EVTYPE) %>%
summarize(FATALITIES = sum(FATALITIES),
INJURIES = sum(INJURIES),
TOTALPROPDMG = sum(TOTALPROPDMG*1e-9),
TOTALCROPDMG = sum(TOTALCROPDMG*1e-9))
## Colecting top 10 fatality causes
fatals <- validData %>%
arrange(desc(FATALITIES)) %>%
select(EVTYPE, FATALITIES)%>%
slice(1:10)
## Plotting fatalities
plotFat <- ggplot(fatals, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat = "identity", fill = "darkred") +
scale_x_discrete(limits = rev(fatals$EVTYPE)) +
labs(x = "", y = "Fatalities") +
coord_flip()
## Colecting top 10 injury causes
injuries <- validData %>%
arrange(desc(INJURIES)) %>%
select(EVTYPE, INJURIES) %>%
slice(1:10)
## Plotting injuries
plotInj <- ggplot(injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat = "identity", fill = "darkblue") +
scale_x_discrete(limits = rev(injuries$EVTYPE)) +
labs(x = "", y = "Injuries") +
coord_flip()
## Printing plots
### Collecting max widths
gA <- ggplotGrob(plotFat)
gB <- ggplotGrob(plotInj)
maxWidth <-  unit.pmax(gA$widths[2:5], gB$widths[2:5])
### Defining max widths
gA$widths[2:5] <- maxWidth
gB$widths[2:5] <- maxWidth
### Defining title
title <- textGrob("Fatalities/Injuries caused by natural events from 2001 to 2011",
gp = gpar(fontface = "bold", fontsize = 15))
### Plotting (used the right argument to add a margin and make the figure fit)
grid.arrange(gA, gB, top = title, left = "Event Type", right = "")
## Colecting top 10 property damages causes
property <- validData %>%
arrange(desc(TOTALPROPDMG)) %>%
select(EVTYPE, TOTALPROPDMG)%>%
slice(1:10)
## Plotting property damages
plotProp <- ggplot(property, aes(x = EVTYPE, y = TOTALPROPDMG)) +
geom_bar(stat = "identity", fill = "darkred") +
scale_x_discrete(limits = rev(property$EVTYPE)) +
scale_y_continuous(breaks = seq(0, 125, by = 25)) +
labs(x = "", y = "Total Crop Damages in Billions of USD") +
coord_flip()
## Colecting top 10 crop damages causes
crop <- validData %>%
arrange(desc(TOTALCROPDMG)) %>%
select(EVTYPE, TOTALCROPDMG) %>%
slice(1:10)
## Plotting crop damages
plotCrop <- ggplot(crop, aes(x = EVTYPE, y = TOTALCROPDMG)) +
geom_bar(stat = "identity", fill = "darkblue") +
scale_x_discrete(limits = rev(crop$EVTYPE)) +
scale_y_continuous(breaks = seq(0, 7, by = 1)) +
labs(x = "", y = "Total Crop Damages in Billions of USD") +
coord_flip()
## Printing plots
### Collecting max widths
gA <- ggplotGrob(plotProp)
gB <- ggplotGrob(plotCrop)
maxWidth <-  unit.pmax(gA$widths[2:5], gB$widths[2:5])
### Defining max widths
gA$widths[2:5] <- maxWidth
gB$widths[2:5] <- maxWidth
### Defining title
title <- textGrob("Property/Crop damage caused by natural events from 2001 to 2011",
gp = gpar(fontface = "bold", fontsize = 15))
### Plotting (used the right argument to add a margin and make the figure fit)
grid.arrange(gA, gB, top = title, left = "Event Type", right = "")
Sys.setenv(http_proxy = "http://f38752b:Raf1123%#proxybe1.fiatauto.com:8080")
Sys.setenv(http_proxy = "http://f38752b:Raf1123%@proxybe1.fiatauto.com:8080")
